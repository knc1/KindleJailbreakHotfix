#!/bin/sh

# Touch screen Kindle Jailbreak Bridge
#
# $Id: bridge.sh 13346 2016-07-11 17:26:56Z NiLuJe $
# 2017-11-23 knc1
VER='1.16'

# Model - original KT is an exception
IS_TOUCH="false"

# Firmware - older than 5.4 is an exception
K5_ATLEAST_54="true"

# At the moment, only the 2017 Oasis does not have a 'Diags' partition
HAS_DIAGS="true"

# Alternate fs root, non-KOA2 only
ROOT=""

# Backup copies
psMKK="/var/local/mkk"
psRP="/var/local/rp"

# Pull some helper functions for logging
source /etc/upstart/functions
LOG_DOMAIN="jb_bridge"

# Defaults based on:
## EIPS_MAXCHARS="$((${SCREEN_X_RES} / ${EIPS_X_RES}))"
## EIPS_MAXLINES="$((${SCREEN_Y_RES} / ${EIPS_Y_RES}))"

# Kindle Touch with 5.3.7.3
# SCREEN_X_RES=600      # Confirmed
# SCREEN_Y_RES=800      # Confirmed
# EIPS_X_RES=12         # 12 Confirmed
# EIPS_Y_RES=20         # 20 Confirmed
EIPS_MAXCHARS=50        # 0..49 Confirmed
EIPS_MAXLINES=40        # 0..39 Confirmed
EIPS_TOP=5              # Just below menu bar
EIPS_BOT=35             # Just above S.O. bar
EIPS_HALF=25            # Characters either side of center
EIPS_OFF=0              # Left hand unusable column(s)
EIPS_POS=${EIPS_TOP}    # Next line to use
CLEAR=$(dd if=/dev/zero bs=1 count=50 2>/dev/null  | tr '\0' ' ')

set_OSD() {
    # For those who want a computed length string in Busybox ash:
    CLEAR=$(dd if=/dev/zero bs=1 count=${EIPS_MAXCHARS} 2>/dev/null  | tr '\0' ' ')
    eips -c
    # Wait for the screen to clear
    sleep 1
}

# Screen constants for message positioning

# KOA2
set_1264_1680() {
#    SCREEN_X_RES=1264
#    SCREEN_Y_RES=1680
    # Attempt an educated guess at these
#    EIPS_X_RES=16
#    EIPS_Y_RES=24
    EIPS_MAXCHARS=66
    EIPS_MAXLINES=68
    EIPS_HALF=33
    set_OSD
}

# KV, PW3, KOA
set_1072_1448() {       # PW3-5.9.2
#    SCREEN_X_RES=1072  # 1072 Confirmed
#    SCREEN_Y_RES=1448  # 1448 Confirmed
#    EIPS_X_RES=15      # 15 Confirmed - YES, 15, not 16 (???)
#    EIPS_Y_RES=24      # 24 Confirmed
    EIPS_MAXCHARS=67    # Positions 0..67 Confirmed, Lab126 has off-by-one-error
    EIPS_MAXLINES=60    # Positions 0..59 Confirmed
    EIPS_HALF=33
    EIPS_OFF=1
    set_OSD
}

# PW1
set_768_1024() {        # PW1-5.3.3
#    SCREEN_X_RES=768   # 768 Confirmed
#    SCREEN_Y_RES=1024  # 1024 Confirmed
#    EIPS_X_RES=16      # 16 Confirmed
#    EIPS_Y_RES=24      # 24 Confirmed
    EIPS_MAXCHARS=48    # 0..47 Confirmed (47 not usable, 1/2 character)
    EIPS_MAXLINES=42    # 0..41 Confirmed
    EIPS_HALF=24
    set_OSD
}

# KT2, KT3
set_608_800() {         # KT3-5.8.5
#    SCREEN_X_RES=608   # 608 Confirmed
#    SCREEN_Y_RES=800   # 800 Confirmed
#    EIPS_X_RES=16      # 16 Confirmed
#    EIPS_Y_RES=24      # 24 Confirmed
    EIPS_MAXCHARS=37    # 0..36 Confirmed (0 not usable, 1/2 character)
    EIPS_MAXLINES=33    # 0..32 Confirmed (0 not usable, 1/2 character)
    EIPS_HALF=18
    EIPS_OFF=1
    set_OSD
}

# on-screen (OSD) message handler
print_centered() {
local S
local i j k l               # Fortran
    # Portrait mode: eips col row string
    eips -h 0 "${EIPS_POS}" "${CLEAR}" 
    # Meanwhile
    l=$(($EIPS_MAXCHARS - $EIPS_OFF))       # Maximum string
    S=${1}                                  # Passed string
    S=${S:0:$l}                             # Trim the length
    i=${#S}                                 # 67
    j=$((i / 2))            # Truncated     # 33
    k=$(($i - ($j * 2)))    # 0 or 1        # 1
    j=$(($j + $k))                          # 34
    l=$(($EIPS_HALF - $j + $EIPS_OFF))      # 0
    [ $l -lt 0 ] && l=0 || true             # skip lh segfault
    # Ah, what was it this was supposed to do? Oh, print something.
    eips -h "$l" "${EIPS_POS}" "${S}"
    # Set up for next line
    EIPS_POS=$((${EIPS_POS} + 1))
    [ ${EIPS_POS} -gt ${EIPS_BOT} ] && EIPS_POS=${EIPS_TOP} || true
}

logmsg() {
    f_log "${1}" "${LOG_DOMAIN}" "${2}" "${3}" "${4}"
}

# Get root file system read/write state
root_rw() {
    set $(cat /proc/mounts | head -n 1)
    [ "x${4}" == 'xrw' ] && return 0 || return 1
}

# Get root file system device
get_root() {
    if [ "x$HAS_DIAGS" == 'xfalse' ] ; then
        if [ -f "/usr/sbin/rdev" ] && [ -x "/usr/sbin/rdev" ] ; then
            set $(rdev) 
            printf '%s' ${1}
        else
            # if rdev goes away, set to KOA2 default
            printf '%s' '/dev/mmcblk2p5'
        fi
    else
        set $(mount / 2>&1 | head -n 1) # Not possible to be un-mounted
        printf '%s' ${2}                # error message contains device name
    fi
}

mount_root_rw() {
local rdev
    rdev=$(get_root)
    print_centered "OS Root $rdev"
    case "$rdev" in
        "/dev/mmcblk0p1" | "/dev/mmcblk2p5" )
            if root_rw ; then
                logmsg "I" "mount_root_rw" "" "Running from Main, $rdev already rw"
            else
                mntroot rw
                logmsg "I" "mount_root_rw" "" "Running from Main, re-mounting $rdev rw"
            fi
            print_centered " Main OS $rdev "
        ;;

        "/dev/mmcblk0p2" )
            ROOT='/var/tmp/main'    # Do not mount into root's home directory
            mkdir -p "${ROOT}"
            # touch screen model, prior to KOA2, running from "Diags" partition
            mount -o rw '/dev/mmcblk0p1' "${ROOT}" 
            logmsg "I" "mount_root_rw" "" "Running from $rdev, mounting /dev/mmcblk0p1 rw"
            print_centered " Diag OS $rdev "
         ;;

        * ) # in which case, punt - Should never reach this point
            logmsg "I" "mount_root_rw" "" "Unrecognized device: $rdev, aborting"
            print_centered " ABORT, OS root $rdev not recognized "
            exit 1
        ;;
    esac
}

# Presume this is a touch screen device with default screen and never fail
check_model() {
    # use a full de-code of usid
    kseries="$(cut -c1-2 /proc/usid)"
    case "${kseries}" in
        "B1" )
            : # Nothing to see here, just move along.
        ;;

        "B0" | "90" )
            kmodel="$(cut -c3-4 /proc/usid)"
            case "${kmodel}" in
		"24" | "1B" | "1D" | "1F" | "1C" | "20" )
			# PaperWhite 1 (2012)
			set_768_1024
		;;
		"D4" | "5A" | "D5" | "D6" | "D7" | "D8" | "F2" | "17" | "60" | "F4" | "F9" | "62" | "61" | "5F" )
			# PaperWhite 2 (2013)
			set_768_1024
		;;
		"13" | "54" | "2A" | "4F" | "52" | "53" )
			# Voyage...
			set_1072_1448
		;;
		"C6" | "DD" )
			# KT2...
			set_608_800
		;;
		"0F" | "11" | "10" | "12" )
			# Touch
			IS_TOUCH="true"
			# Default screen settings
		;;
		* )
                    IS_TOUCH="true"         # Default and message
                    logmsg "I" "Check Model 3..4" "" "Unknown device code: ${kseries}${kmodel}"
                    # Default screen settings
                    print_centered " Model 3..4 K5 defaulted "
                ;;
            esac
        ;;

        "G0" )
            kmodel="$(cut -c3-6 /proc/usid)"
            case "${kmodel}" in
                "90G1" | "90G2" | "90G4" | "90G5" | "90G6" | "90G7" | "90KB" | "90KC" | "90KD" | "90KE" | "90KF" | "90LK" | "90LL" )
                    # PW3...
                    set_1072_1448
                ;;
                "B0GC" | "B0GD" | "B0GR" | "B0GS" | "B0GT" | "B0GU" )
                    # Oasis...
                    set_1072_1448
                ;;
                "00DU" | "00K9" | "00KA" )
                    # KT3...
                    set_608_800
                ;;
                "00P8" | "00S1" | "00SA" )
                    # KOA2
                    set_1264_1680
                    HAS_DIAGS='false'
                ;;
                * )
                    IS_TOUCH="true"         # Default and message
                    logmsg "I" "Check Model 3..6" "" "Unknown device code: ${kseries}${kmodel}"
                    # Default screen settings
                    print_centered " Model 3..6 K5 defaulted "
		;;
            esac
        ;;
        *)
            IS_TOUCH="true"         # Default and message
            logmsg "I" "Check Model 1..2" "" "Unknown device code: ${kseries}${kmodel}"
            # Default screen settings
            print_centered " Model unknown K5 defaulted "
        ;;
    esac
    set_OSD
    return 0
}

# Controls the addition of an empty file at root of system, defaults to doit.
check_version() {
local l=$(cat /etc/prettyversion.txt)
    [ "${#l}" > 6 ] && set "${l}" || return 1
    kver=$(echo "${2}" | cut -c1-3)
    case ${kver} in
        5.0* | 5.1* | 5.2* | 5.3* )
            K5_ATLEAST_54='false' # A PW1 also runs (ran) a 5.2.x and 5.3.x firmware
        ;;
        * )
            K5_ATLEAST_54='true'
        ;;
    esac
    return 0
}

MD5=''
INST=''
get_md5() {
local r
    set $(md5sum "${1}" 2>/dev/nul) ; r=$? ; echo "${1}" ; return $r
}

get_free() {
    set $(df -k /var/local)
    # 0.5Mbyte is just a WAFG
    [ ${11} -lt 512 ] && return 1 || return 0
}

###
#   Installers when callled:
#       Source is known to exist
#       Destination is known to be writable
#       Space is known to be available on /var/local
#   With random exceptions thrown it to keep the reader awake
###

install_touch_update_key() {
    local FRM="${psMKK}/pubdebkey01.pem"
    local TOO="${ROOT}/etc/uks/pubdevkey01.pem"
    logmsg "I" "install_touch_update_key" "" "Copying the jailbreak updater key"
    cat > "${FRM}" << EOF
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJn1jWU+xxVv/eRKfCPR9e47lP
WN2rH33z9QbfnqmCxBRLP6mMjGy6APyycQXg3nPi5fcb75alZo+Oh012HpMe9Lnp
eEgloIdm1E4LOsyrz4kttQtGRlzCErmBGt6+cAVEV86y2phOJ3mLk0Ek9UQXbIUf
rvyJnS2MKLG2cczjlQIDAQAB
-----END PUBLIC KEY-----
EOF
    if install -D -u root -g root -m 0644 ${FRM} ${TOO} 2>/dev/null ; then
        print_centered " JAILBREAK "
    else
        logmsg "W" "install_touch_update_key" "" "Install failed"
        print_centered " JB Failed "
    fi
}

install_fw54_exec_userstore_flag() {
    # Make sure we're on FW >= 5.4...
    if [ "x${K5_ATLEAST_54}" == "xtrue" ] ; then
        logmsg "I" "install_fw54_exec_userstore_flag" "" "Creating exec flag file"
        touch "${ROOT}/MNTUS_EXEC" 2>/dev/null
        print_centered " FW Execute Flag "
    fi
}

install_mkk_dev_keystore() {
    local FRM="${psMKK}/developer.keystore"
    local TOO="${ROOT}/var/local/java/keystore/developer.keystore"
    logmsg "I" "install_mkk_dev_keystore" "" "Copying the kindlet keystore"

    if install -D -o framework -g javauser -m 0644 ${FRM} ${TOO} 2>/dev/null ; then
        print_centered " MKK KEYS "
    else
        logmsg "W" "install_mkk_dev_keystore" "" "Install failed"
        print_centered " FAILED TO COPY MKK KEYS "
    fi
}

install_mkk_kindlet_jb() {
    local FRM="${psMKK}/json_simple-1.1.jar"
    local TOO="${ROOT}/opt/amazon/ebook/lib/json_simple-1.1.jar"
    logmsg "I" "install_mkk_kindlet_jb" "" "Copying the kindlet jailbreak"

    if install -D -o root -g root -m 0644 "${FRM}" "${TOO}" 2>/dev/null ; then
        print_centered " MKK K JB "
    else
        logmsg "W" "install_mkk_kindlet_jb" "" "Install failed"
        print_centered " MKK K JB Failed "
    fi
}

setup_gandalf() {
    logmsg "I" "setup_gandalf" "" "Setting up gandalf... you shall not pass!"
    chmod a+x "${psMKK}/gandalf"
    chmod +s "${psMKK}/gandalf"
    ln -sf "${psMKK}/gandalf" "${psMKK}/su"
    print_centered " GANDALF "
}

install_dispatch() {
    local FRM="${psMKK}/dispatch.sh"
    local TOO="${ROOT}/usr/bin/logThis.sh"
    logmsg "I" "install_dispatch" "" "Copying the dispatch script"
    if install -D -o root -g root -m 0755 "${FRM}" "${TOO}" 2>/dev/null ; then
        print_centered " DISPATCH "
    else
        logmsg "W" "install_dispatch" "" "Dispatch copy failed"
        print_centered " Failed dispatch install "
    fi
}

install_bridge_job() {
    local FRM="${psMKK}/bridge.conf"
    local TOO="${ROOT}/etc/upstart/bridge.conf"
    logmsg "I" "install_bridge_job" "" "Copying the bridge job"
    if install -D -o root -g root -m 0755 "${FRM}" "${TOO}" 2>/dev/null ; then
        print_centered " BRIDGE "
    else
        logmsg "W" "install_bridge_job" "" "Installation failed"
        print_centered " Bridge install failed "
    fi
}

clean_up() {
    # Unmount main rootfs if we're on diags...
    if [ -n "${ROOT}" ] ; then
        logmsg "I" "clean_up" "" "Unmounting ${ROOT} rootfs"
        umount "${ROOT}" 2>/dev/null
    else
        # Make the main rootfs ro again
        mount -o remount,ro / 2>/dev/null
    fi
    print_centered "  Bridge $VER Completed  "
}

### Setup the device specifics.
check_model     # also sets up the OSD literals
check_version   # defaults to installing the flag file name

### Make the rootfs writable, since that is the whole point of this script.
mount_root_rw   # allows this script to be run from diags, prior to KOA2

### Announce
print_centered " === Bridge  $VER === "

# Start with the userstore exec flag on FW >= 5.4 
# (so that the last eips print shown will make sense)
[ ! -f "${ROOT}/MNTUS_EXEC" ] && install_fw54_exec_userstore_flag || true

### Handle our OTA update key - install or re-install as required
if [ ! -f "${ROOT}/etc/uks/pubdevkey01.pem" ] ; then
    # No jailbreak key, install it
    install_touch_update_key
else
    # Jailbreak key found... Check it.
    if MD5=$(get_md5 "${ROOT}/etc/uks/pubdevkey01.pem") ; then
        if [ "${MD5}" != "7130ce39bb3596c5067cabb377c7a9ed" ] ; then
            # Unknown (?!) jailbreak key, re-install it
            print_centered " Replacing device key "
            install_touch_update_key
        else
            if [ ! -O "${ROOT}/etc/uks/pubdevkey01.pem" ] ; then
                # Not our own? Make it so!
                print_centered " Fixing ownership of dev key "
                chown root:root "${ROOT}/etc/uks/pubdevkey01.pem"
                chmod 0644 "${ROOT}/etc/uks/pubdevkey01.pem"
            else
                print_centered " Device key checked "
            fi
        fi
    else
        print_centered " md5 pubdevkey failed "
        # Since we could not check it, try a new one
        install_touch_update_key
    fi
fi

### Handle our Kindlet developer keystore - install re-install
if [ -f "${psMKK}/developer.keystore" ] ; then
    # Have a persistent copy available
    if [ ! -f "${ROOT}/var/local/java/keystore/developer.keystore" ] ; then
        # No developer keystore, install it
	install_mkk_dev_keystore
	print_centered " Java keystore installed "
    else
        # If developer keystore doesn't match, install ours.
        # NOTE: This *will* mess with real, official developer keystores. 
        # Not that we really care about it, but it should be noted ;).
        if INST=$(get_md5 "/var/local/java/keystore/developer.keystore") ; then
            if MD5=$(get_md5 "${psMKK}/developer.keystore") ; then
                if [ "${MD5}" != "${INST}" ] ; then
                    install_mkk_dev_keystore
                    print_centered " Java keystore replaced "
                else
                    print_centered " Java keystore checked "
                fi
            else
                print_centered " Replacing Java keystore 1 "
                install_mkk_dev_keystore                
            fi
        else
            print_centered " Replacing Java keystore 2 "
            install_mkk_dev_keystore
        fi
    fi
else
    print_centered " info: Java keystore missing "
fi

### Handle our Kindlet jail break - install re-install
if [ -f "${psMKK}/json_simple-1.1.jar" ] ; then
    # Have a persistent copy available
    if [ ! -f "${ROOT}/opt/amazon/ebook/lib/json_simple-1.1.jar" ] ; then
        install_mkk_kindlet_jb
        print_centered " Installing kindlet JB "
    else
	# Check if unchanged
	if INST=$(get_md5 "${ROOT}/opt/amazon/ebook/lib/json_simple-1.1.jar") ; then
            if MD5=$(get_md5 "${psMKK}/json_simple-1.1.jar") ; then
                if [ "${MD5}" != "${INST}" ] ; then
                    install_mkk_kindlet_jb
                    print_centered " Kindlet JB replaced "
                else
                    print_centered " Kindlet JB checked "
                fi
            else
                print_centered " Replacing Kindlet jail break 1 "
                install_mkk_kindlet_jb
            fi
        else
            print_centered " Replacing Kindlet jail break 2 "
            install_mkk_kindlet_jb
	fi
    fi
else
    print_centered " info: Kindlet jail break missing "
fi

### Check if we need to do something with Gandalf
if [ -f "${psMKK}/gandalf" ] ; then
    # It's there, check the setup
    [ ! -x "${psMKK}/su" ] && setup_gandalf || true
else
    print_centered " Gandalf missing "
fi

### Check if we need to do something with the RP upstart job
if [ -f "${psRP}/debrick.conf" ] ; then
    # have a persistent copy available
    if [ ! -f "${ROOT}/etc/upstart/debrick.conf" ] ; then
        install_rp
    else # accept no substitutes
        if INST=$(get_md5 "${ROOT}/etc/upstart/debrick.conf") ; then
            if MD5=$(get_md5 "${psRP}/debrick.conf") ; then
                [ "${MD5}" != "${INST}" ] && install_rp || true
            fi
        fi
    fi
else
    print_centered "info: RP not found "
fi

### Check if we need to do something with the CRP upstart job
if [ -f "${psRP}/cowardsdebrick.conf" ] ; then
    # have a persistent copy available
    if [ ! -f "${ROOT}/etc/upstart/cowardsdebrick.conf" ] ; then
        install_crp
    else # accept no substitutes
        if INST=$(get_md5 "${ROOT}/etc/upstart/cowardsdebrick.conf") ; then
            if MD5=$(get_md5 "${psRP}/cowardsdebrick.conf") ; then
                [ "${MD5}" != "${INST}" ] && install_crp || true
            fi
        fi
    fi
else
    print_centered "info: CRP not found "
fi

### Check if we need to do something with the dispatch script
if [ -f "${psMKK}/dispatch.sh" ] ; then
    if [ ! -f "${ROOT}/usr/bin/logThis.sh" ] ; then
            install_dispatch
            print_centered " Installing dispatcher "
    else  # Test if ours and current version
        if INST=$(get_md5 "${ROOT}/usr/bin/logThis.sh")  ; then
            if MD5=$(get_md5 "${psMKK}/dispatch.sh")  ; then
                if "${INST}" != "${MD5}" ] ; then
                    install_dispatch
                    print_centered " Dispatcher replaced "
                else
                    print_centered " Dispatcher checked "
                fi
            else
                install_dispatch 
                print_centered " Replacing dispatcher 1 "
            fi
        else
            install_dispatch
            print_centered " Replacing dispatcher 2 "
	fi
    fi
else
    print_centered " info: Dispatcher not found "
fi

### Check if we need to do something with the bridge job
if [ -f "${psMKK}/bridge.conf" ] ; then
    if [ ! -f "${ROOT}/etc/upstart/bridge.conf" ] ; then
        install_bridge_job
        print_centered " Installing bridge job "
    else
        # Test if ours and current version
        if MD5=$(get_md5 "${psMKK}/bridge.conf") ; then
            if INST=$(get_md5 "${ROOT}/etc/upstart/bridge.conf") ; then
                if [ "${MD5}" != "${INST}" ] ; then
                    install_bridge_job
                    print_centered " Bridge job replaced "
                else
                    print_centered " Bridge job checked "
                fi
            else
                install_bridge_job
                print_centered " Replacing bridge job 1 "
            fi
        else
            install_bridge_job
            print_centered " Teplacing bridge job 2 "
        fi
    fi
else
    print_centered " Bridge job not found "
fi

### Return fs to ro and do other misc. stuff
clean_up

return 0
